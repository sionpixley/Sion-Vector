#ifndef __SION_VECTOR__
#define __SION_VECTOR__

#include <string>
#include <algorithm>
#include <typeinfo>

namespace sion {
    template<typename Type>
    class Vector {
    private:
        Type* elements;
        size_t max_length;
        size_t length;
        
    public:
        // constructors
        Vector();
        Vector(const Vector<Type>& that);

        // destructor
        ~Vector();

        // iterators
        using iterator = Type*;
        using const_iterator = const Type*;
        iterator begin() noexcept;
        const_iterator begin() const noexcept;
        const_iterator cbegin() const noexcept;
        iterator end() noexcept;
        const_iterator end() const noexcept;
        const_iterator cend() const noexcept;

        // aliases for reference
        using reference = Type&;
        using const_reference = const Type&;

        // capacity
        size_t size() const noexcept;
        size_t capacity() const noexcept;
        bool is_empty() const noexcept;

        // adding and removing
        int push_back(Type item);
        Type pop_back();
        int clear();

        // sorting
        Vector<Type>& sort(char order='a');
        Vector<Type> sorted(char order='a') const;
        
        // reversing
        Vector<Type>& reverse();
        Vector<Type> reversed() const;
        
        // operators
        Vector<Type>& operator =(const Vector<Type>& that);
        reference operator [](size_t index);
        const_reference operator [](size_t index) const;
        Vector<Type> operator +(const Vector<Type>& that) const;
        Vector<Type>& operator +=(const Vector<Type>& that);
    };
}

#include "sion-vector.cpp"
#endif // Sion's vector implementation

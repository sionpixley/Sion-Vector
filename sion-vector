#ifndef __SION_VECTOR__
#define __SION_VECTOR__

#include <string>
#include <algorithm>
#include <typeinfo>

namespace sion {
    template<typename Type>
    class Vector {
    private:
        Type* elements;
        size_t max_length;
        size_t length;
        
    public:
        // constructors
        Vector();
        Vector(const Vector<type>& that);

        // destructor
        ~Vector();

        // methods for iterators
        using iterator = Type*;
        Type* begin();
        Type* end();
        //using reverse_iterator = Type*;
        //Type* rbegin();
        //Type* rend();

        // methods to get basic information about the Vector
        size_t size();
        bool is_empty();

        // methods to insert and remove elements
        int push_back(Type item);
        Type pop_back();
        int clear();

        // methods to sort elements
        void sort(char order='a');
        Vector<Type> sorted(char order='a');
        
        // methods to reverse elements
        void reverse();
        Vector<Type> reversed();
        
        // operators
        Vector<Type>& operator =(const Vector<Type>& that);
        Type& operator [](size_t index);
    };
}

#include "sion-vector.cpp"
#endif // Sion's vector implementation

